;;;; Unit tests for double-metaphone.lisp
;;;; Requires Quicklisp system :fiveam

(defpackage #:double-metaphone-tests
  (:use #:cl #:fiveam #:double-metaphone))

(in-package #:double-metaphone-tests)

;;; ----------------------------------------------------------------------------

(def-suite double-metaphone-suite
  :description "Tests for the Double Metaphone implementation")

(in-suite double-metaphone-suite)

(test basic-english-names
      (is (equal (multiple-value-list (double-metaphone "Smith")) '("SM0" "XMT")))
      (is (equal (multiple-value-list (double-metaphone "Schmidt")) '("XMT" "SMT")))
      (is (equal (multiple-value-list (double-metaphone "Robert")) '("RPRT" "RPRT")))
      (is (equal (multiple-value-list (double-metaphone "Rupert")) '("RPRT" "RPRT")))
      (is (equal (multiple-value-list (double-metaphone "Ashcraft")) '("AXKRFT" "AXKRFT"))))

(test similar-sounding-names
      ;; These should produce matching or very close keys
      (multiple-value-bind (p1 s1) (double-metaphone "Steven")
        (multiple-value-bind (p2 s2) (double-metaphone "Stephen")
          (is (or (string= p1 p2)
                  (string= s1 s2)))))
      (multiple-value-bind (p1 s1) (double-metaphone "Smith")
        (multiple-value-bind (p2 s2) (double-metaphone "Smyth")
          (is (or (string= p1 p2)
                  (string= s1 s2))))))

(test edge-cases
      (is (equal (multiple-value-list (double-metaphone "X")) '("S" "S")))
      (is (equal (multiple-value-list (double-metaphone "B")) '("P" "P")))
      (is (equal (multiple-value-list (double-metaphone "")) '("" "")))
      (is (equal (multiple-value-list (double-metaphone "123")) '("" ""))))

(test capitalization
      (is (equal (multiple-value-list (double-metaphone "smith"))
                 (multiple-value-list (double-metaphone "SMITH"))))
      (is (equal (multiple-value-list (double-metaphone "McDonald"))
                 (multiple-value-list (double-metaphone "MCDONALD")))))

(test english-homophones
      (let ((homophones '(; ("ACCEPT" "EXCEPT")
                          ("AD" "ADD")
                          ("ADVICE" "ADVISE")
                          ("AID" "AIDE")
                          ("AIL" "ALE")
                          ("AIR" "ERE") ; "HEIR"
                          ("AISLE" "ISLE")
                          ("ALLUSION" "ILLUSION")
                          ("ALTAR" "ALTER")
                          ("ATE" "EIGHT")
                          ("BAIL" "BALE")
                          ("BAND" "BANNED")
                          ("BARE" "BEAR")
                          ("BEAT" "BEET")
                          ("BLEW" "BLUE")
                          ("BREAD" "BRED")
                          ("BUY" "BY" "BYE")
                          ("CAPITAL" "CAPITOL")
                          ("CEILING" "SEALING")
                          ("CELL" "SELL")
                          ("CENT" "SCENT" "SENT")
                          ("CEREAL" "SERIAL")
                          ("CHEWS" "CHOOSE")
                          ("CHILE" "CHILI" "CHILLY")
                          ("CHORD" "CORD")
                          ("CITE" "SITE" "SIGHT")
                          ; ("CLOSE" "CLOTHES")
                          ("COARSE" "COURSE")
                          ("COMPLEMENT" "COMPLIMENT")
                          ("COUNCIL" "COUNSEL")
                          ("CREAK" "CREEK")
                          ("CREWS" "CRUISE")
                          ("DAYS" "DAZE")
                          ("DEAR" "DEER")
                          ("DESERT" "DESSERT")
                          ("DEW" "DO" "DUE")
                          ("DIE" "DYE")
                          ("DISCREET" "DISCRETE")
                          ("DOE" "DOUGH")
                          ("DUAL" "DUEL")
                          ("ELICIT" "ILLICIT")
                          ("EMINENT" "IMMINENT")
                          ("EWE" "YOU")
                          ("EYE" "I")
                          ; ("FACTS" "FAX")
                          ("FAIR" "FARE")
                          ("FAIRY" "FERRY")
                          ("FAZE" "PHASE")
                          ("FEAT" "FEET")
                          ("FIR" "FUR")
                          ("FLEA" "FLEE")
                          ("FLEW" "FLU")
                          ("FLOUR" "FLOWER")
                          ("FOR" "FORE" "FOUR")
                          ("FORTH" "FOURTH")
                          ("GENE" "JEAN")
                          ("GORILLA" "GUERRILLA")
                          ("GREASE" "GREECE")
                          ("GROAN" "GROWN")
                          ("HAIR" "HARE")
                          ("HALL" "HAUL")
                          ("HAY" "HEY")
                          ("HEAL" "HEEL")
                          ("HEAR" "HERE")
                          ("HI" "HIGH")
                          ("HOARSE" "HORSE")
                          ; ("HOLE" "WHOLE")
                          ("HOLEY" "HOLY") ; "WHOLLY"
                          ; ("HOUR" "OUR")
                          ("KNEAD" "NEED")
                          ("KNEW" "NEW")
                          ("KNIGHT" "NIGHT")
                          ("KNOT" "NOT")
                          ("KNOW" "NO")
                          ("LEASED" "LEAST")
                          ("LOAN" "LONE")
                          ("MADE" "MAID")
                          ("MAIL" "MALE")
                          ("MARRY" "MERRY")
                          ("MEAT" "MEET")
                          ("MORNING" "MOURNING")
                          ("NONE" "NUN")
                          ("OAR" "OR" "ORE")
                          ("OH" "OWE")
                          ("ONE" "WON")
                          ("PAIL" "PALE")
                          ("PAIN" "PANE")
                          ("PEACE" "PIECE")
                          ("PEAK" "PEEK")
                          ; ("PATIENCE" "PATIENTS")
                          ("PEAR" "PAIR")
                          ("PLAIN" "PLANE")
                          ("POLE" "POLL")
                          ("POOR" "POUR")
                          ("PRAY" "PREY")
                          ("PRINCIPAL" "PRINCIPLE")
                          ("RAIN" "REIN")
                          ("RAP" "WRAP")
                          ("REAL" "REEL")
                          ("RIGHT" "WRITE")
                          ("RING" "WRING")
                          ("ROAD" "RODE")
                          ("ROLE" "ROLL")
                          ("ROSE" "ROWS")
                          ("SAIL" "SALE")
                          ("SCENE" "SEEN")
                          ("SEA" "SEE")
                          ("SEAM" "SEEM")
                          ("SEW" "SO" "SOW")
                          ("SOAR" "SORE")
                          ("SOLE" "SOUL")
                          ("SON" "SUN")
                          ("SOME" "SUM")
                          ("STAIR" "STARE")
                          ("STEAL" "STEEL")
                          ("SUITE" "SWEET")
                          ("TAIL" "TALE")
                          ("THEIR" "THERE")
                          ("THREW" "THROUGH")
                          ("TO" "TOO" "TWO")
                          ("TOE" "TOW")
                          ("VARY" "VERY")
                          ("WAIL" "WHALE")
                          ("WAIST" "WASTE")
                          ("WAIT" "WEIGHT")
                          ("WAR" "WORE")
                          ("WARN" "WORN")
                          ("WAY" "WEIGH")
                          ("WE" "WEE")
                          ("WEAK" "WEEK")
                          ("WEAR" "WHERE")
                          ("WEATHER" "WHETHER")
                          ("WHICH" "WITCH")
                          ; ("WOOD" "WOULD")
                          )))
        (loop :for group :in homophones
              :for base = (first group)
              :for (primary-base) = (multiple-value-list (double-metaphone base))
              :do (loop :for word :in (rest group)
                        :for (primary) = (multiple-value-list (double-metaphone word))
                        :do (is (string= primary-base primary)
                                (format nil "~A(~A) vs ~A(~A)" base primary-base word primary))))))

